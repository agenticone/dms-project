services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/certs:/certs
    networks:
      - dms-net
    labels:
      # Enable Traefik to route to its own dashboard
      - "traefik.enable=true"
      # Define the router for the dashboard, using the internal 'api' service
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      # Add Basic Authentication middleware. Replace the user hash with the one you generated.
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$apr1$$QVXgZ79u$$Qn/s5tQYyKdX66Vf462K20" # Default: admin/your_secure_password
      # Apply the auth middleware to the dashboard router
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth"

  openldap:
    image: bitnami/openldap:2.6
    container_name: openldap
    restart: unless-stopped
    environment:
      LDAP_ADMIN_USERNAME: admin
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD:-adminpassword}
      LDAP_ROOT: dc=dms,dc=local
      BITNAMI_DEBUG: "true"
    volumes:
      - openldap-data:/bitnami/openldap
      - ./openldap/init.ldif:/docker-entrypoint-initdb.d/init.ldif:ro
    networks:
      - dms-net
    healthcheck:
      test: ["CMD-SHELL", "ldapsearch -x -H ldap://localhost:1389 -b 'ou=users,dc=dms,dc=local' -s base '(objectClass=organizationalUnit)' > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 120s

  keycloak:
    build: ./keycloak
    container_name: keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_URL_PROPERTIES: "?connectTimeout=30&socketTimeout=30&tcpKeepAlive=true"
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloakpassword}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-adminpassword}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      JBPM_HOSTNAME: ${JBPM_HOSTNAME} # Pass JBPM hostname for realm import substitution
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD:-adminpassword} # Pass LDAP password for realm import
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_PROXY: edge
      KC_LOG_LEVEL: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      openldap:
        condition: service_healthy
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json:ro
    command: start --import-realm --optimized
    networks:
      - dms-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_HOSTNAME}`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health/ready"]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 180s

  jbpm:
    image: jboss/jbpm-server-full:7.61.0.Final
    container_name: jbpm
    restart: unless-stopped
    environment:
      JBPM_DB_DRIVER: postgres
      JBPM_DB_HOST: postgres
      JBPM_DB_PORT: 5432
      JBPM_DB_NAME: jbpm
      JBPM_DB_USER: jbpm
      JBPM_DB_PASSWORD: ${JBPM_DB_PASSWORD:-jbpmpassword}
      KEYCLOAK_URL: https://${KEYCLOAK_HOSTNAME}/auth
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-dms-realm}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-jbpm-client}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-clientsecret}
      JBPM_HT_CALLBACK_CLASS: org.jbpm.services.task.identity.KeycloakUserGroupCallbackImpl
      JBPM_HT_CALLBACK_PROPERTIES: keycloak.url=https://${KEYCLOAK_HOSTNAME}/auth,keycloak.realm=${KEYCLOAK_REALM:-dms-realm},keycloak.clientId=${KEYCLOAK_CLIENT_ID:-jbpm-client},keycloak.clientSecret=${KEYCLOAK_CLIENT_SECRET:-clientsecret}
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - dms-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jbpm.rule=Host(`${JBPM_HOSTNAME}`)"
      - "traefik.http.routers.jbpm.entrypoints=websecure"
      - "traefik.http.routers.jbpm.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jbpm.tls=true"
      - "traefik.http.services.jbpm.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/kie-server/services/rest/server/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 240s

  mongodb:
    image: mongo:8.0
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongopassword}
      MONGO_INITDB_DATABASE: bpdata
    volumes:
      - mongodb-data:/data/db
    networks:
      - dms-net

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgrespassword}
      POSTGRES_USER: postgres
      # Pass DB passwords for init script
      KEYCLOAK_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloakpassword}
      JBPM_DB_PASSWORD: ${JBPM_DB_PASSWORD:-jbpmpassword}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dms-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  openldap-data:
  mongodb-data:
  postgres-data:

networks:
  dms-net:
    driver: bridge

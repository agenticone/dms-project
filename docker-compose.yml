services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    # Configuration is now loaded from traefik.yml, command-line args override it
    command: ["--log.level=DEBUG"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/certs:/certs
    networks:
      - dms-net
    labels:
      # Enable Traefik to route to its own dashboard
      - "traefik.enable=true"
      # Define the router for the dashboard, using the internal 'api' service
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      # Add Basic Authentication middleware. Replace the user hash with the one you generated.
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_AUTH_USERS}"
      # Apply the auth middleware to the dashboard router
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth"

  openldap:
    image: bitnami/openldap:2.6
    container_name: openldap
    restart: unless-stopped
    environment:
      LDAP_ADMIN_USERNAME: admin
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD:-adminpassword}
      LDAP_ROOT: dc=dms,dc=local
      BITNAMI_DEBUG: "true"
    volumes:
      - openldap-data:/bitnami/openldap
      - ./openldap/init.ldif:/docker-entrypoint-initdb.d/init.ldif:ro
    networks:
      - dms-net
    healthcheck:
      test: ["CMD-SHELL", "ldapsearch -x -H ldap://localhost:1389 -b 'ou=users,dc=dms,dc=local' -s base '(objectClass=organizationalUnit)' > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 120s

  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
      args:
        - PG_JDBC_VERSION=42.7.3
    container_name: keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak?connectTimeout=30&socketTimeout=30&tcpKeepAlive=true
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloakpassword}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-adminpassword}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      JBPM_HOSTNAME: ${JBPM_HOSTNAME} # Pass JBPM hostname for realm import substitution
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD:-adminpassword} # Pass LDAP password for realm import
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_HTTPS_ENABLED: "true"
      KC_PROXY: edge
      KC_LOG_LEVEL: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      openldap:
        condition: service_healthy
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json
    command: start --import-realm
    networks:
      - dms-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_HOSTNAME}`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    healthcheck:
      # Use the curl binary we added to a custom /tools directory.
      # We must set LD_LIBRARY_PATH so curl can find its copied libraries.
      # Using CMD-SHELL allows us to set the environment variable for the command.
      test: ["CMD-SHELL", "LD_LIBRARY_PATH=/tools/lib /tools/bin/curl -f http://localhost:9000/health/ready"]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 180s

  jbpm:
    image: jboss/jbpm-server-full:7.61.0.Final
    container_name: jbpm
    restart: unless-stopped
    environment:
      JBPM_DB_DRIVER: postgres
      JBPM_DB_HOST: postgres
      JBPM_DB_PORT: 5432
      JBPM_DB_NAME: jbpm
      JBPM_DB_USER: jbpm
      JBPM_DB_PASSWORD: ${JBPM_DB_PASSWORD:-jbpmpassword}
      JAVA_OPTS_APPEND: "-Djboss.host.name=${JBPM_HOSTNAME} -Djaeger.sampler.type=const -Djaeger.sampler.param=0" # Set public hostname and disable Jaeger tracing
      JBPM_HT_CALLBACK_CLASS: org.jbpm.services.task.identity.KeycloakUserGroupCallbackImpl
      JBPM_HT_CALLBACK_PROPERTIES: keycloak.url=http://keycloak:8080,keycloak.realm=${KEYCLOAK_REALM:-dms-realm},keycloak.clientId=${KEYCLOAK_CLIENT_ID:-jbpm-client},keycloak.clientSecret=${KEYCLOAK_CLIENT_SECRET:-clientsecret}
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    volumes:
      # Mount a specific keycloak.json to ensure correct internal communication
      - ./jbpm/keycloak.json:/opt/jboss/keycloak.json:ro
    networks:
      - dms-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jbpm.rule=Host(`${JBPM_HOSTNAME}`)"
      - "traefik.http.routers.jbpm.entrypoints=websecure"
      - "traefik.http.routers.jbpm.tls.certresolver=letsencrypt"
      # Add a middleware to redirect from the root path (/) to the application path (/business-central/)
      - "traefik.http.middlewares.jbpm-redirect.redirectregex.regex=^https?://([^/]+)/?$$"
      - "traefik.http.middlewares.jbpm-redirect.redirectregex.replacement=https://$$1/business-central/"
      - "traefik.http.middlewares.jbpm-redirect.redirectregex.permanent=true"
      - "traefik.http.routers.jbpm.middlewares=jbpm-redirect"
      - "traefik.http.services.jbpm.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/kie-server/services/rest/server/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 240s

  app-server:
    build: ./app-server
    container_name: app-server
    restart: unless-stopped
    environment:
      # Connection string for MongoDB. Uses service name 'mongodb'.
      MONGO_URL: "mongodb://${MONGO_USER:-mongo}:${MONGO_PASSWORD:-mongopassword}@mongodb:27017/${MONGO_DB:-bpdata}?authSource=admin"
    depends_on:
      - mongodb
    networks:
      - dms-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-server.rule=Host(`${DMS_HOSTNAME}`)"
      - "traefik.http.routers.app-server.entrypoints=websecure"
      - "traefik.http.routers.app-server.tls.certresolver=letsencrypt"
      - "traefik.http.services.app-server.loadbalancer.server.port=3000"

  mongodb:
    image: mongo:8.0
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-mongo}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongopassword}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-bpdata}
    volumes:
      - mongodb-data:/data/db
    networks:
      - dms-net

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgrespassword}
      POSTGRES_USER: postgres
      # Pass DB passwords for init script
      KEYCLOAK_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloakpassword}
      JBPM_DB_PASSWORD: ${JBPM_DB_PASSWORD:-jbpmpassword}
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dms-net
    healthcheck:
      # This check is more robust. It ensures the server is ready AND that the init script
      # has successfully created the databases needed by the other services.
      test: >
        bash -c "
          pg_isready -U postgres &&
          psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'keycloak'\" | grep -q 1 &&
          psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'jbpm'\" | grep -q 1
        "
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

volumes:
  openldap-data:
  mongodb-data:
  postgres-data:

networks:
  dms-net:
    driver: bridge
